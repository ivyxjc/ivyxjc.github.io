<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ivyxjc</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ivyxjc.xyz/"/>
  <updated>2018-08-09T10:10:11.353Z</updated>
  <id>https://ivyxjc.xyz/</id>
  
  <author>
    <name>Ivyxjc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文章备份</title>
    <link href="https://ivyxjc.xyz/2100/01/01/others-blog/"/>
    <id>https://ivyxjc.xyz/2100/01/01/others-blog/</id>
    <published>2099-12-31T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.353Z</updated>
    
    <content type="html"><![CDATA[<p>一些比较好的博客文章留档, 防止将来要用的时候又要浪费时间找.  （时间是2100年只是为了置顶…）</p><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ol><li><a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a><br><a href="https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="https://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">RxJava 与 Retrofit 结合的最佳实践</a><br><a href="https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ol><li><a href="http://www.jianshu.com/p/1edeff139de5" target="_blank" rel="noopener">Md系列3、CoordinatorLayout 里 Toobar和TabLayout等发生的一系列故事</a><br><a href="https://web.archive.org/save/http://www.jianshu.com/p/1edeff139de5" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="https://github.com/hanks-zyh/SwipeRefreshLayout" target="_blank" rel="noopener">下拉刷新SwipeRefreshLayout</a><br><a href="">archive.org备份页面</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/12921889" target="_blank" rel="noopener">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a><br><a href="https://web.archive.org/web/20161021223718/http://blog.csdn.net/guolin_blog/article/details/12921889" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="noopener">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a><br><a href="https://web.archive.org/web/20161021215349/http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/17045157" target="_blank" rel="noopener">Android视图状态及重绘流程分析，带你一步步深入了解View(三)</a><br><a href="https://web.archive.org/web/20151023100537/http://blog.csdn.net/guolin_blog/article/details/17045157" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/17357967" target="_blank" rel="noopener">Android自定义View的实现方法，带你一步步深入了解View(四)</a><br><a href="https://web.archive.org/save/http://blog.csdn.net/guolin_blog/article/details/17357967" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/" target="_blank" rel="noopener">Understanding Android’s LayoutInflater.inflate()</a><br><a href="https://web.archive.org/web/20160604203134/https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="java8"><a href="#java8" class="headerlink" title="java8"></a>java8</h3><ol><li><a href="http://ebnbin.com/2015/12/20/java-8-default-methods/" target="_blank" rel="noopener">java8 默认方法</a><br><a href="https://web.archive.org/web/20161023233757/http://ebnbin.com/2015/12/20/java-8-default-methods/" target="_blank" rel="noopener">jarchive.org备份页面 </a></li></ol><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h3><ol><li>500 or less中A Web Crawler With asyncio Coroutines的中文翻译版(关于python爬虫以及协程) :<br><a href="http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html" target="_blank" rel="noopener">&lt;译&gt; A Web Crawler With asyncio Coroutines</a><br><a href="http://drafts.damnever.com/2015/A-Web-Crawler-With-asyncio-Coroutines.html" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h3 id="python-1"><a href="#python-1" class="headerlink" title="python"></a>python</h3><ol><li>yield到底在做什么, 来自stackoverflow中的回答:<br><br><a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do" target="_blank" rel="noopener">what-does-the-yield-keyword-do</a><br><a href="https://web.archive.org/web/20161018133835/http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do" target="_blank" rel="noopener">archive.org备份页面</a><br><br><a href="http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html" target="_blank" rel="noopener">中文翻译版本</a><br><a href="https://web.archive.org/web/20161030082921/http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h2 id="Raspberry"><a href="#Raspberry" class="headerlink" title="Raspberry"></a>Raspberry</h2><ol><li><a href="https://www.zybuluo.com/yangxuan/note/321467#7%E4%B8%BAssh%E5%90%AF%E7%94%A8%E4%B8%A4%E6%AD%A5%E8%AE%A4%E8%AF%81" target="_blank" rel="noopener">树莓派3的使用(Raspbian)</a></li><li><a href="http://www.kawabangga.com/posts/1398" target="_blank" rel="noopener">树莓派通过邮件上报实时IP，随时随地远程登录树莓派</a><br><a href="https://web.archive.org/web/20160731051025/http://www.kawabangga.com/posts/1398" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="http://www.itdadao.com/articles/c15a588496p0.html" target="_blank" rel="noopener">树莓派 挂载SAMBA（小米路由器）</a><br><a href="https://web.archive.org/save/http://www.itdadao.com/articles/c15a588496p0.html" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><ol><li><a href="http://www.8dlive.com/post/371.html" target="_blank" rel="noopener">kcp安装配置教程</a><br><a href="https://web.archive.org/web/20161106035844/http://www.8dlive.com/post/371.html" target="_blank" rel="noopener">archive.org备份页面</a></li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li><a href="https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md" target="_blank" rel="noopener">如何合并两个git仓库</a><br><a href="https://web.archive.org/web/20161208141359/https://github.com/deercoder/0-tech-notes/blob/master/Git/git_merge_local_repos.md" target="_blank" rel="noopener">archive.org备份页面</a></li></ol>]]></content>
    
    <summary type="html">
    
      他人的一些比较好的文章备份
    
    </summary>
    
    
      <category term="backup" scheme="https://ivyxjc.xyz/tags/backup/"/>
    
      <category term="blog" scheme="https://ivyxjc.xyz/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Docker相关命令</title>
    <link href="https://ivyxjc.xyz/2018/08/09/Linux/2018-04-28-docker-basic/"/>
    <id>https://ivyxjc.xyz/2018/08/09/Linux/2018-04-28-docker-basic/</id>
    <published>2018-08-09T10:10:11.277Z</published>
    <updated>2018-08-09T10:10:11.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行docker"><a href="#运行docker" class="headerlink" title="运行docker"></a>运行docker</h2><h3 id="映射端口"><a href="#映射端口" class="headerlink" title="映射端口"></a>映射端口</h3><p><code>docker run -p 8080:8080 image_name</code></p><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p><code>docker run -v /logs:/var/log/ -p 5000:80 image_name</code></p><p>将宿主<code>/logs</code>目录加载到container中的<code>/var/log</code></p><h3 id="–add-host"><a href="#–add-host" class="headerlink" title="–add-host"></a>–add-host</h3><p><code>docker run -it --add-host db-static:1.1.1.1 ubuntu cat /etc/hosts1</code></p><h2 id="docker相关命令"><a href="#docker相关命令" class="headerlink" title="docker相关命令"></a>docker相关命令</h2><h3 id="进入container命令行"><a href="#进入container命令行" class="headerlink" title="进入container命令行"></a>进入container命令行</h3><p><code>docker exec -i -t container_id bash</code></p><p>退出 <code>exit</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;运行docker&quot;&gt;&lt;a href=&quot;#运行docker&quot; class=&quot;headerlink&quot; title=&quot;运行docker&quot;&gt;&lt;/a&gt;运行docker&lt;/h2&gt;&lt;h3 id=&quot;映射端口&quot;&gt;&lt;a href=&quot;#映射端口&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Web" scheme="https://ivyxjc.xyz/categories/Web/"/>
    
    
      <category term="docker" scheme="https://ivyxjc.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>centos7 LNMP配置</title>
    <link href="https://ivyxjc.xyz/2018/08/09/Linux/2018-03-17-centos7-init/"/>
    <id>https://ivyxjc.xyz/2018/08/09/Linux/2018-03-17-centos7-init/</id>
    <published>2018-08-09T10:10:11.276Z</published>
    <updated>2018-08-09T10:10:11.276Z</updated>
    
    <content type="html"><![CDATA[<p>centos7环境搭建及相关配置。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="更改ssh端口以及防火墙开放端口"><a href="#更改ssh端口以及防火墙开放端口" class="headerlink" title="更改ssh端口以及防火墙开放端口"></a>更改ssh端口以及防火墙开放端口</h2><p><a href="https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/" target="_blank" rel="noopener">怎样修改 CentOS 7 SSH 端口</a>(<a href="https://web.archive.org/web/20180317035653/https://sebastianblade.com/how-to-modify-ssh-port-in-centos7/" target="_blank" rel="noopener">archive存档</a>)</p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>直接wget下载地址并不能成功下载。使用下面的方式可以成功下载jdk-8u162.rpm.<br>使用<code>rpm -qa | grep &#39;jdk&#39;</code>查找已安装的jdk，使用<code>rpm -e jdk**</code>来删除。之后使用<code>rpm -ivh jdk**</code>来安装新的jdk.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u162-b12/0da788060d494f5095bf8624735fa2f1/jdk-8u162-linux-x64.rpm?AuthParam=1521257408_9aefdf6daa3472d09007c0abd24832e1&quot;</span><br></pre></td></tr></table></figure><h2 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.jianshu.com/p/7cccdaa2d177" target="_blank" rel="noopener">Centos 7 安装 MySQL</a>(<a href="https://webcache.googleusercontent.com/search?q=cache:E4urk8c-wMYJ:https://www.jianshu.com/p/7cccdaa2d177+&amp;cd=1&amp;hl=zh-CN&amp;ct=clnk&amp;gl=cn" target="_blank" rel="noopener">google cache</a>)</p><h3 id="允许外网访问"><a href="#允许外网访问" class="headerlink" title="允许外网访问"></a>允许外网访问</h3><ol><li>云服务安全组及系统防火墙放开该端口</li><li>进入<code>mysql</code>执行<code>grant all on *.* to root@% identified by &#39;pass&#39;;</code>即可外网访问且拥有全部权限。</li><li>若希望改用户具有分发权限的权限，则可以使用<code>grant all on *.* to root@% identified by &#39;pass&#39; with grant option;</code></li></ol><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &apos;Development Tools&apos;</span><br><span class="line">yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br></pre></td></tr></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</span><br><span class="line"></span><br><span class="line">tar -xzvf Python-3.6.4.tgz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Python-3.6.4</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 备份python</span><br><span class="line">mv /usr/bin/python /usr/bin/python_bak</span><br><span class="line"># 更改yum</span><br><span class="line">vi /usr/bin/yum</span><br><span class="line"># 建立软连接</span><br><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class="line">ln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="安装准备-1"><a href="#安装准备-1" class="headerlink" title="安装准备"></a>安装准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 下载git</span><br><span class="line"></span><br><span class="line">###</span><br></pre></td></tr></table></figure><p>tar -zxf git.tar.gz<br>cd **<br>make configure<br>./configure –prefix=/usr/local<br>make install<br><code>`</code></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><code>uname -r</code>检查内核版本号是否大于<code>3.10</code></p><p><code>yum -y install docker</code>安装docker</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="enable-ipv4-forwarding"><a href="#enable-ipv4-forwarding" class="headerlink" title="enable ipv4_forwarding"></a>enable ipv4_forwarding</h2><p>在 <code>/etc/sysctl.conf</code>以及 <code>/usr/lib/sysctl.d/50-default.conf</code>里面都添加<code>net.ipv4.ip_forward = 1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;centos7环境搭建及相关配置。&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;h2 id=&quot;更改ssh端口以及防火墙开放端口&quot;&gt;&lt;a href=&quot;#更改ss
      
    
    </summary>
    
      <category term="Linux" scheme="https://ivyxjc.xyz/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://ivyxjc.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 认证配置</title>
    <link href="https://ivyxjc.xyz/2018/05/05/%E6%95%88%E7%8E%87/2018-05-05-build-Kafka/"/>
    <id>https://ivyxjc.xyz/2018/05/05/效率/2018-05-05-build-Kafka/</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.375Z</updated>
    
    <content type="html"><![CDATA[<p>Kafka支持多种安全验证方式，本文主要介绍使用用户名/密码的方式的方式认证Kafka。</p><h3 id="Zookeeper-相关更改"><a href="#Zookeeper-相关更改" class="headerlink" title="Zookeeper 相关更改"></a>Zookeeper 相关更改</h3><p><code>zookeeper-server-start.bat</code>（win）<br>添加</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IF</span> ["<span class="variable">%KAFKA_SASL_OPTS%</span>"] <span class="keyword">EQU</span> [""] (</span><br><span class="line">    <span class="built_in">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\kafka_2.<span class="number">11</span>-<span class="number">1</span>.<span class="number">1</span>.<span class="number">0</span>\kafka_zoo_jaas.conf</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>kafka_zoo_jaas.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Server &#123;  </span><br><span class="line">  org.apache.kafka.common.security.plain.PlainLoginModule required  </span><br><span class="line">    username=&quot;zoo-admin&quot;</span><br><span class="line">    password=&quot;zoo-admin-pass&quot;</span><br><span class="line">    user_zooUser=&quot;zooUser-pass&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Kafka配置-相关更改"><a href="#Kafka配置-相关更改" class="headerlink" title="Kafka配置 相关更改"></a>Kafka配置 相关更改</h2><p><code>kafka-server-start.bat</code>(win)<br>添加<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IF</span> ["<span class="variable">%KAFKA_SASL_OPTS%</span>"] <span class="keyword">EQU</span> [""] (</span><br><span class="line">    <span class="built_in">set</span> KAFKA_SASL_OPTS=-Djava.security.auth.login.config=filepath\kafka_2.<span class="number">11</span>-<span class="number">1</span>.<span class="number">1</span>.<span class="number">0</span>\kafka_server_jaas.conf</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><code>kafka_server_jaas.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">KafkaServer &#123;</span><br><span class="line">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">    username=&quot;user&quot;</span><br><span class="line">    password=&quot;user-pass&quot;</span><br><span class="line">    user_kafkaUser=&quot;kafkaUser-pass&quot;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">Client &#123;</span><br><span class="line">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">        username=&quot;zooUser&quot;</span><br><span class="line">        password=&quot;9minusTen1999!&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>KafkaServer</code>中的内容是Producer，Consumer连接Kafka时要输入的验证信息。</p><p><code>Client</code>中的内容即连接zookeeper是需要输入的验证信息，和<code>kafka_zoo_jaas.conf</code>中的内容一致。</p><h3 id="使得JVM参数生效"><a href="#使得JVM参数生效" class="headerlink" title="使得JVM参数生效"></a>使得JVM参数生效</h3><p><code>zookeeper-server-start.bat</code>和<code>kafka-server-start.bat</code>最终都是使用<code>kafka-run-class.bat</code>来真正运行的，所以需要将这两个文件添加的JVM参数添加到此文件。</p><p>打开<code>kafka-run-class.bat</code>(win)</p><p>将<code>KAFKA_SASL_OPTS</code>添加到<code>set COMMAND</code>后面（不要放在<code>%Java%</code>之前）。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>zookeeper的登陆名最好不要和kafka的登陆名有重复，在我尝试的时候发现，名称相同的时候，会直接使用KafkaServer下的用户去登陆zookeeper导致无法登陆成功。</li><li>理论上讲<code>kafka_server_jaas.conf</code>中Client中为连接zookeeper的认证信息。但是在我尝试的时候发现，只在Client中记录登陆信息并不能成功，还需要将该信息填入KafkaServer中才能成功（即使如此，也未必能成功）。<br>目前发现的一个成功的组合，是使用<code>kafka_zoo_jaas.conf</code>中的username后面的用户名称，并在该文件下，添加<code>user_...=password</code>，使用此作为密码，并将这一认证信息添加到<code>kafka_serve_jass.conf</code>中的<code>KafkaServer</code>和<code>Client</code>中。</li></ol>]]></content>
    
    <summary type="html">
    
      本文主要介绍如何配置Kafka认证
    
    </summary>
    
      <category term="效率" scheme="https://ivyxjc.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="kafka" scheme="https://ivyxjc.xyz/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>class.getResource() class.getClassLoader.getResource()之间的区别</title>
    <link href="https://ivyxjc.xyz/2018/03/26/java/2018-03-26-how-to-get-resource/"/>
    <id>https://ivyxjc.xyz/2018/03/26/java/2018-03-26-how-to-get-resource/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.347Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p><p>在maven，gradle等构建工具构建的项目，resouces文件夹下的内容默认在classpath下面。</p><p>所以可以直接用<code>this.class.getClassLoader.getResource(...)</code>来获取对应的文件</p><h2 id="Class与ClassLoader-getResource-之间的区别"><a href="#Class与ClassLoader-getResource-之间的区别" class="headerlink" title="Class与ClassLoader.getResource()之间的区别"></a>Class与ClassLoader.getResource()之间的区别</h2><p>使用<code>*.class.getResouce()</code>和<code>*.class.getClassLoader.getResource()</code>是有一定的区别的。</p><p><code>*.class.getResouce()</code>先会<code>resolveName(name)</code>然后在委托给<code>classLoader</code>来处理。所以区别主要在于<code>resolveName(name)</code>。 <code>resolveName(name)</code>主要是功能是：若<code>name</code>以<code>/</code>开头，那么则直接调用<code>classLoader</code>来处理。若没有以<code>/</code>开头，则会将类全名中的点替换成<code>/</code>作为路径再加上name委托给<code>classLoader</code>来处理。</p><p>所以要获取<code>resources</code>文件夹下的内容，<code>*.class.getResouce(name)</code>中的<code>name</code>要以<code>/</code>开头。而<code>this.class.getClassLoader.getResource(...)</code>不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.net.<span class="function">URL <span class="title">getResource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    name = resolveName(name);</span><br><span class="line">    ClassLoader cl = getClassLoader0();</span><br><span class="line">    <span class="keyword">if</span> (cl==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A system class.</span></span><br><span class="line">        <span class="keyword">return</span> ClassLoader.getSystemResource(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cl.getResource(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">resolveName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!name.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            Class&lt;?&gt; c = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">while</span> (c.isArray()) &#123;</span><br><span class="line">                c = c.getComponentType();</span><br><span class="line">            &#125;</span><br><span class="line">            String baseName = c.getName();</span><br><span class="line">            <span class="keyword">int</span> index = baseName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                name = baseName.substring(<span class="number">0</span>, index).replace(<span class="string">'.'</span>, <span class="string">'/'</span>)</span><br><span class="line">                    +<span class="string">"/"</span>+name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = name.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;code&gt;*.class.getResouce()&lt;/code&gt;和&lt;code&gt;*.class.getClassLoader.getResource()&lt;/code&gt;是有一定的区别的。&lt;/p&gt;
&lt;p&gt;在maven，gradle等构建工具构建的项目，resouces文件夹
      
    
    </summary>
    
      <category term="Java" scheme="https://ivyxjc.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ivyxjc.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>链表相交以及链表含环的相关问题</title>
    <link href="https://ivyxjc.xyz/2017/03/04/algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle/"/>
    <id>https://ivyxjc.xyz/2017/03/04/algorithm/CodeIntervieBook/LinkedList/2017-03-01-LinkedList-Cycle/</id>
    <published>2017-03-03T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初步-如何判断一个链表是否含有环"><a href="#初步-如何判断一个链表是否含有环" class="headerlink" title="初步: 如何判断一个链表是否含有环"></a>初步: 如何判断一个链表是否含有环</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环.</p><p>时间复杂度和环和长度以及链表长度有关, 为线性时间.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        <span class="comment">//0: 无环 ; 1: 有环</span></span><br><span class="line">        <span class="keyword">int</span> circleFlag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast.next==<span class="keyword">null</span>||fast.next.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                slow=head;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="进阶-如果一个链表有环-找出进入环的第一个节点"><a href="#进阶-如果一个链表有环-找出进入环的第一个节点" class="headerlink" title="进阶: 如果一个链表有环, 找出进入环的第一个节点"></a>进阶: 如果一个链表有环, 找出进入环的第一个节点</h2><p>使得两个名为fast, slow的节点等于头节点, fast每次向前两步,  slow每次向前一步, 如果fast.next为null, 或者fast.next.next为null, 则说明没有环. 如果fast和slow相遇, 说明有环. 此时将fast节点移动号head节点(判断fast和slow是否相遇, 如果相遇,说明head节点即使入环的第一个节点). 之后fast的节点每次走一步, slow节点每次走一步. 下一次相遇的节点即是入环的第一个节点.</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>某个链表总长度为n+m, 环的长度为m. <br><br>其中令</p><p>$$n\%m=n-x\cdot m   ,(x=\left \lfloor \tfrac{n}{m} \right \rfloor)$$</p><ol><li>slow节点到达入环的第一个节点时fast位置:<br><br>入环的第$n\%m$节点, 即$n-x\cdot m$.</li><li>第一次相遇时, 两个节点所处的位置:<br><br>入环的第$m-(n-x\cdot m)$节点, 即$(x+1)\cdot m-n$.</li><li>此时fast节点回到原点, 当fast节点再次走到入环的第一个节点时, slow节点的位置:<br><br>入环的地$((x+1)\cdot m-n+n)\%m$. 即$((x+1)\cdot m)%m$. 即为入环的第一个节点. 因为从fast节点回到原点再到入环的第一个节点过程中, fast节点一直在环外, slow节点一直在环内. 所以此次相遇为第二次相遇. 即按照之前的走法, 第二次相遇的节点即为入环的第一个节点.</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode fast=head;</span><br><span class="line">    ListNode slow=head;</span><br><span class="line">    <span class="comment">//0: 无环 ; 1: 有环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> circleFlag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast.next==<span class="keyword">null</span>||fast.next.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            circleFlag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">            fast=head;</span><br><span class="line">            circleFlag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(circleFlag==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">        fast=fast.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶-以及如何判断两个链表是否相交"><a href="#进阶-以及如何判断两个链表是否相交" class="headerlink" title="进阶: 以及如何判断两个链表是否相交"></a>进阶: 以及如何判断两个链表是否相交</h2><h3 id="一链表有环-另一链表无环-不相交"><a href="#一链表有环-另一链表无环-不相交" class="headerlink" title="一链表有环, 另一链表无环, 不相交"></a>一链表有环, 另一链表无环, 不相交</h3><h3 id="两个链表都没有环"><a href="#两个链表都没有环" class="headerlink" title="两个链表都没有环"></a>两个链表都没有环</h3><p>计算两个链表的长度, 较长的链表先向前走<code>Math.abs(lenA-lenB)</code>步, 之后两个节点一起前进, 并相互比较, 若有相同的节点, 则说明两个链表在该节点出相交, 否则说明两个链表不相交.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">listLengthWithoutCycle</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        head=head.next;</span><br><span class="line">        res+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode headA, ListNode headB)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lenA= listLengthWithoutCycle(headA);</span><br><span class="line">    <span class="keyword">int</span> lenB= listLengthWithoutCycle(headB);</span><br><span class="line">    System.out.println(lenA);</span><br><span class="line">    System.out.println(lenB);</span><br><span class="line">    ListNode a=headA;</span><br><span class="line">    ListNode b=headB;</span><br><span class="line">    <span class="keyword">if</span>(lenA&lt;lenB)&#123;</span><br><span class="line">        a=headB;</span><br><span class="line">        b=headA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> diff=Math.abs(lenA-lenB);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class="line">        a=a.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span>||b==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        a=a.next;</span><br><span class="line">        b=b.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两个链表都有环"><a href="#两个链表都有环" class="headerlink" title="两个链表都有环"></a>两个链表都有环</h3><p>找出两个链表入环的第一个节点, 其中一个节点不断的赋值为该节点的next, 若能够遇到另一个链表的入环的一个节点, 则说明两个链表环内相交, 否则说明两个链表为环外相交或者不相交.</p><p>如果两个链表是在环外相交的, 解法和都没有环的解法类似.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode headA, ListNode headB,ListNode aIns,ListNode bIns)</span></span>&#123;</span><br><span class="line">    <span class="comment">//环内相交</span></span><br><span class="line">    ListNode aInsCopy=aIns;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        aIns=aIns.next;</span><br><span class="line">        <span class="keyword">if</span>(aIns==aInsCopy)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(aIns==bIns)&#123;</span><br><span class="line">            <span class="keyword">return</span> aIns;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在while循环没有return, 说明并没有在环内相交</span></span><br><span class="line">    <span class="keyword">int</span> lenA=listLengthWithCycle(headA);</span><br><span class="line">    <span class="keyword">int</span> lenB=listLengthWithCycle(headB);</span><br><span class="line">    ListNode a=headA;</span><br><span class="line">    ListNode b=headB;</span><br><span class="line">    <span class="keyword">if</span>(lenA&lt;lenB)&#123;</span><br><span class="line">        a=headB;</span><br><span class="line">        b=headA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> diff=Math.abs(lenA-lenB);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; diff;  i++) &#123;</span><br><span class="line">        a=a.next;</span><br><span class="line">        <span class="keyword">if</span>(a==aIns)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a==aIns)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b==bIns)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a=a.next;</span><br><span class="line">        b=b.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">listLengthWithCycle</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    ListNode ins=detectCycle(node);</span><br><span class="line">    <span class="keyword">int</span> flag=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node==ins)&#123;</span><br><span class="line">            flag++;</span><br><span class="line">        &#125;</span><br><span class="line">        res+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何判断一个链表是否含环, 以及如何判断两个链表是否相交.
    
    </summary>
    
      <category term="Algorithm" scheme="https://ivyxjc.xyz/categories/Algorithm/"/>
    
    
      <category term="linkedlist" scheme="https://ivyxjc.xyz/tags/linkedlist/"/>
    
  </entry>
  
  <entry>
    <title>Fibonacci数列及相关问题</title>
    <link href="https://ivyxjc.xyz/2017/03/01/algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci/"/>
    <id>https://ivyxjc.xyz/2017/03/01/algorithm/CodeIntervieBook/RecursionAndDP/2017-03-01-Fibonacci/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fibonacci数列及相关的问题的描述"><a href="#Fibonacci数列及相关的问题的描述" class="headerlink" title="Fibonacci数列及相关的问题的描述"></a>Fibonacci数列及相关的问题的描述</h2><ol><li>给定正整数n, 求解Fibonacci数列第n项的值;</li><li>给定正整数N, 代表台阶, 一次可以跨2个或者1个台阶, 有多少走法</li><li>假设成熟的母牛只会生1头小母牛, 并且永远不会死, 第一年农场有1只成熟的母牛,从第二年开始, 母牛开始生小母牛. 每只小母牛3年之后成熟. 给定正整数N, 求出N年后牛的数量.</li></ol><h2 id="基础解法"><a href="#基础解法" class="headerlink" title="基础解法"></a>基础解法</h2><h3 id="递归的解法"><a href="#递归的解法" class="headerlink" title="递归的解法"></a>递归的解法</h3><p>递归的解法是最基础, 也是最好理解, 但是时间复杂度很高, 为 $O(2^n)$ ,空间复杂度为O(2^n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibRecursion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibRecursion(n - <span class="number">1</span>) + fibRecursion(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代的解法"><a href="#迭代的解法" class="headerlink" title="迭代的解法"></a>迭代的解法</h3><p>迭代的解法即将已经解决的位置处的数存储, 之后直接调用, 不用再计算</p><p>时间复杂度为O(n), 空间复杂度为O(n).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibIteration</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅记录前两个值, 空间复杂度为O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">fibIteration</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BigInteger res = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">        BigInteger pre_1 = BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        BigInteger pre_2 = BigInteger.valueOf(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res = pre_1.add(pre_2);</span><br><span class="line">            pre_2 = pre_1;</span><br><span class="line">            pre_1 = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="进阶解法"><a href="#进阶解法" class="headerlink" title="进阶解法"></a>进阶解法</h2><h3 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h3><p>$$<br>F(n)=F(n-1)+F(n-2) \\<br>\Rightarrow<br>\begin{vmatrix}<br>F(n) &amp; F(n-1) \\<br>\end{vmatrix}<br>=<br>\begin{vmatrix}<br>F(n) &amp; F(n-1)<br>\end{vmatrix}<br>\times<br>\begin{vmatrix}<br>a &amp; b \\<br>c &amp; d<br>\end{vmatrix}\\<br>$$</p><p>解得:<br></p><p>$$<br>a=1 \<br>b=1 \<br>c=1 \<br>d=1<br>$$</p><p>即: <br></p><p>$$<br>\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\end{vmatrix}<br>=<br>\begin{vmatrix}<br>F(n-1)&amp; F(n-2)<br>\end{vmatrix}<br>\times<br>\begin{vmatrix}<br>1 &amp; 1 \\<br>1 &amp; 0<br>\end{vmatrix}<br>\\<br>\Rightarrow<br>\begin{vmatrix}<br> F(n) &amp; F(n-1)<br>\end{vmatrix}<br>=<br>\begin{vmatrix}<br> 1 &amp; 1<br>\end{vmatrix}<br>\times<br>{\begin{vmatrix}<br>1 &amp; 1 \\<br>1 &amp; 0<br>\end{vmatrix}}^{n-2}<br>$$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">fibMatrix</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (BigInteger.ZERO.compareTo(BigInteger.valueOf(n)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (BigInteger.ONE.compareTo(BigInteger.valueOf(n)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrixPower(<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;, n)[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算矩阵matrix的p次方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger[][] matrixPower(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> p) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix[<span class="number">0</span>].length != matrix.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"矩阵输入错误, 无法进行乘法."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    BigInteger[][] res = <span class="keyword">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; res[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            res[i][j] = BigInteger.valueOf(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">        res[i][i] = <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInteger[][] tmp = <span class="keyword">new</span> BigInteger[matrix.length][matrix.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            tmp[i][j] = BigInteger.valueOf(matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = p &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            res = multiMatrix(res, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = multiMatrix(tmp, tmp);</span><br><span class="line">        p = p &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> multiMatrix(<span class="keyword">new</span> BigInteger[][]&#123;&#123;<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>), <span class="keyword">new</span> BigInteger(<span class="string">"1"</span>)&#125;&#125;, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵乘法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger[][] multiMatrix(BigInteger[][] m1, BigInteger[][] m2) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="keyword">if</span> (m1[<span class="number">0</span>].length != m2.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"矩阵输入错误, 无法进行乘法."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    BigInteger[][] res = <span class="keyword">new</span> BigInteger[m1.length][m2[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m2[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            res[i][j] = <span class="keyword">new</span> BigInteger(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m1.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m2[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m2.length; k++) &#123;</span><br><span class="line">                res[i][j] = res[i][j].add(m1[i][k].multiply(m2[k][j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行时间比较"><a href="#运行时间比较" class="headerlink" title="运行时间比较:"></a>运行时间比较:</h2><p>当n=45时, 递归的方法就需要6794ms才能完成.</p><p>当n=1000000时, 迭代的方法耗时16s左右, 使用矩阵的方法只需耗时1.266s即完成</p>]]></content>
    
    <summary type="html">
    
      与Fibonacci数列相关的问题的解法
    
    </summary>
    
      <category term="Algorithm" scheme="https://ivyxjc.xyz/categories/Algorithm/"/>
    
    
      <category term="dynamic_programming" scheme="https://ivyxjc.xyz/tags/dynamic-programming/"/>
    
      <category term="Fibonacci" scheme="https://ivyxjc.xyz/tags/Fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://ivyxjc.xyz/2017/01/08/design_pattern/2017-01-08-proxy-pattern/"/>
    <id>https://ivyxjc.xyz/2017/01/08/design_pattern/2017-01-08-proxy-pattern/</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.346Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式也叫委托模式, 应用非常广泛. 其定义:<br><br>Provide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)</p><a id="more"></a><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="抽象主题类"><a href="#抽象主题类" class="headerlink" title="抽象主题类"></a>抽象主题类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###真实主题类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject subject = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject=<span class="keyword">new</span> Proxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject=subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Object... objects)</span></span>&#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个代理类可以代理多个被代理者, 而在使用时, 该代理类到底代理哪个真实类, 可以由场景类决定.</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>职责清晰</li><li>高扩展性</li><li>智能化</li></ol><h2 id="代理分类"><a href="#代理分类" class="headerlink" title="代理分类"></a>代理分类</h2><p>设计模式中的代理分为普通代理和强制代理.</p><p>###　普通代理</p><p>普通代理的要求便是: 客户端只能访问代理角色, 而不能访问真实角色. 可以通过代理角色传递真实角色所需要的参数.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(IGamePlayer gamePlayer,String name)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(gamePlayer==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不能创建真实角色"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录名"</span>+user+<span class="string">"的用户"</span>+<span class="keyword">this</span>.name+<span class="string">"登录成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayerProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IGamePlayer mIGamePlayer=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayerProxy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            mIGamePlayer=<span class="keyword">new</span> GamePlayer(<span class="keyword">this</span>,name);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e )&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mIGamePlayer.login(user,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">客户类代码</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    IGamePlayer proxy=<span class="keyword">new</span> GamePlayerProxy(<span class="string">"张三"</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"start time"</span>);  </span><br><span class="line">    proxy.login(<span class="string">"zhangsan"</span>,<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(<span class="string">"end time"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###　强制代理</p><p>强制代理要求必须通过真实角色去寻找代理角色, 否则不能访问.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个人都可以找到自己的代理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getProxy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我的代理是谁</span></span><br><span class="line">    <span class="keyword">private</span> IGamePlayer proxy=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isProxy())&#123;</span><br><span class="line">            System.out.println(<span class="string">"登录名"</span>+user+<span class="string">"的用户"</span>+<span class="keyword">this</span>.name+<span class="string">"登录成功!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请使用指定的代理访问"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxy=<span class="keyword">new</span> GamePlayerProxy(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.proxy==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayerProxy</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IGamePlayer gameplayer=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayerProxy</span><span class="params">(IGamePlayer gamePlayer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameplayer=gamePlayer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gameplayer.login(user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IGamePlayer <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">客户类代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        IGamePlayer gameplayer=<span class="keyword">new</span> GamePlayer(<span class="string">"张三"</span>);</span><br><span class="line">        IGamePlayer proxy=gameplayer.getProxy();</span><br><span class="line">        System.out.println(<span class="string">"start time"</span>);</span><br><span class="line">        proxy.login(<span class="string">"zhangsan"</span>,<span class="string">"password"</span>);</span><br><span class="line">        System.out.println(<span class="string">"end time"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayIH</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//被代理者</span></span><br><span class="line">    Class cls=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的实例</span></span><br><span class="line">    Object obj=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayIH</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result=method.invoke(<span class="keyword">this</span>.obj,args);</span><br><span class="line">        <span class="keyword">if</span>(method.getName().equalsIgnoreCase(<span class="string">"login"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"有人正在用我账号登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePlayer</span> <span class="keyword">implements</span> <span class="title">IGamePlayer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePlayer</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录名"</span>+user+<span class="string">"的用户"</span>+<span class="keyword">this</span>.name+<span class="string">"登录成功!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">客户类代码</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">    IGamePlayer player=<span class="keyword">new</span> GamePlayer(<span class="string">"张三"</span>);</span><br><span class="line">    InvocationHandler handler=<span class="keyword">new</span> GamePlayIH(player);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"start time"</span>);</span><br><span class="line">    <span class="comment">//获取类的ClassLoader</span></span><br><span class="line">    ClassLoader cl=player.getClass().getClassLoader();</span><br><span class="line">    <span class="comment">//动态生产一个代理者</span></span><br><span class="line">    IGamePlayer proxy=(IGamePlayer) Proxy.newProxyInstance(cl,<span class="keyword">new</span> Class[]&#123;IGamePlayer.class&#125;,handler);</span><br><span class="line">    </span><br><span class="line">    proxy.login(<span class="string">"zhangsan"</span>,<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(<span class="string">"end time    "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理模式也叫委托模式, 应用非常广泛. 其定义:&lt;br&gt;&lt;br&gt;Provide a surrogate or placehoder for another object to control access to it.(为其它对象提供一种代理以控制对这个对象的访问)&lt;/p&gt;
    
    </summary>
    
      <category term="OO" scheme="https://ivyxjc.xyz/categories/OO/"/>
    
    
      <category term="设计模式" scheme="https://ivyxjc.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Vim相关命令及用法</title>
    <link href="https://ivyxjc.xyz/2017/01/03/%E6%95%88%E7%8E%87/2017-01-03-vim/"/>
    <id>https://ivyxjc.xyz/2017/01/03/效率/2017-01-03-vim/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ol><li>向左侧移动num个单词并将光标置于单词首: [num]b</li><li>向右侧移动num个单词并将光标置于单词首: [num]w</li><li>向右侧移动num个单词并将光标置于单词尾: [num]e</li><li>向左侧移动num个单词并将光标置于单词尾: [num]ge</li></ol><p>移至行末且进入插入模式: A</p><p>##　删除,　复制,　粘贴</p><p>删除当前行至缓冲区: dd<br>复制当前行: yy</p><p>粘贴: p</p>]]></content>
    
    <summary type="html">
    
      本文主要介绍如何使用vim
    
    </summary>
    
      <category term="效率" scheme="https://ivyxjc.xyz/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="faq" scheme="https://ivyxjc.xyz/tags/faq/"/>
    
      <category term="vim" scheme="https://ivyxjc.xyz/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>构建Spring Web应用</title>
    <link href="https://ivyxjc.xyz/2016/12/30/javaWeb/spring/2016-12-30-spring-mvc-basic/"/>
    <id>https://ivyxjc.xyz/2016/12/30/javaWeb/spring/2016-12-30-spring-mvc-basic/</id>
    <published>2016-12-29T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.353Z</updated>
    
    <summary type="html">
    
      构建Spring Web应用
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ivyxjc.xyz/categories/JavaWeb/"/>
    
    
      <category term="javaweb" scheme="https://ivyxjc.xyz/tags/javaweb/"/>
    
      <category term="spring" scheme="https://ivyxjc.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 面向切面编程</title>
    <link href="https://ivyxjc.xyz/2016/12/26/javaWeb/spring/2016-12-26-Spring-aop-basic/"/>
    <id>https://ivyxjc.xyz/2016/12/26/javaWeb/spring/2016-12-26-Spring-aop-basic/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.352Z</updated>
    
    <summary type="html">
    
      Spring 面向切面编程
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ivyxjc.xyz/categories/JavaWeb/"/>
    
    
      <category term="javaweb" scheme="https://ivyxjc.xyz/tags/javaweb/"/>
    
      <category term="spring" scheme="https://ivyxjc.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring高级装配</title>
    <link href="https://ivyxjc.xyz/2016/12/25/javaWeb/spring/2016-12-25-Spring-Intermediate/"/>
    <id>https://ivyxjc.xyz/2016/12/25/javaWeb/spring/2016-12-25-Spring-Intermediate/</id>
    <published>2016-12-24T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境与配置"><a href="#环境与配置" class="headerlink" title="环境与配置"></a>环境与配置</h2><p>由于在项目开发时和项目配置时, 可能会有一些代码的不同, 如何根据不同的环境来进行配置. Spring有bean profile的功能. </p><h3 id="在JavaConfig中配置profile"><a href="#在JavaConfig中配置profile" class="headerlink" title="在JavaConfig中配置profile"></a>在JavaConfig中配置profile</h3><p>在Java配置中, 使用@Profile注解来确定这个bean属于哪一个profile.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"dev"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassName <span class="title">function1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile</span>(<span class="string">"prod"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassName <span class="title">function2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在XML中配置profile"><a href="#在XML中配置profile" class="headerlink" title="在XML中配置profile"></a>在XML中配置profile</h3><h3 id="激活profile"><a href="#激活profile" class="headerlink" title="激活profile"></a>激活profile</h3><p>Spring依据两个独立的属性来判断激活哪一个profile. 这两个独立的属性便是spring.profiles.active和spring.profiles.default. 如果设置了active参数, 则根据该值来判断激活哪一个profile. 若没有, 则根据default值来判断, 若两个值都未设置, 则只会加载那些没有定义在profile中的bean.</p><h2 id="条件化bean"><a href="#条件化bean" class="headerlink" title="条件化bean"></a>条件化bean</h2><p>Spring4之后引入了@Conditional注解, 给定的计算结果为true, 则创建该bean, 否则该bean会被忽略.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional</span>(MagicExistsCondition.class)</span><br><span class="line"><span class="keyword">public</span> .....&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicExistsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ConditionContext是一个接口, 主要有以下几个作用:</p><ol><li>借助getRegistry()返回的BeanDefinitionRegistry检查bean定义</li><li>借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在, 探查bean的属性</li><li>借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么</li><li>读取并探查getResourceLoader()返回的ResourceLoader所加载的资源</li><li>借助getClassLoader()返回的ClassLoader加载并检查类是否存在</li></ol><p>AnnotatedTypeMetadata可以检查带有@Bean注解的方法上还有什么注解</p><p>可以借助isAnnotated(String str) 来判断带有@Bean注解的方法是否还有特定的注解 </p><h2 id="处理自动装配的歧义性"><a href="#处理自动装配的歧义性" class="headerlink" title="处理自动装配的歧义性"></a>处理自动装配的歧义性</h2><p>当有多个bean都满足某一装配要求时, 就会出现问题. 解决方法有:</p><ol><li>标示首选的bean</li><li>使用限定符</li></ol><h3 id="标示首选的bean"><a href="#标示首选的bean" class="headerlink" title="标示首选的bean"></a>标示首选的bean</h3><p>@Primary可以来将一个bean标识为首选bean. @Primary既可以与@Component组合用在组件扫描的bean上, 也可以与@Bean组合用在JavaConfig文件中.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Componen</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">implements</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  ClassName <span class="title">getBean1</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然, 也可以使用XML文件来标识首选bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">primary</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>不可以将多个可能产生歧义的bean设为首选.</p><h3 id="使用限定符"><a href="#使用限定符" class="headerlink" title="使用限定符"></a>使用限定符</h3><p>标示首选bean只可以解决较为简单的bean歧义问题, 如果问题较为复杂, 则无法解决. </p><p>使用@Qualifier注解是使用限定符的主要方式. 它可以与@Autowired和@Inject协同使用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"bean_id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(InterfaceName i)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Qualifier注解声明了想要注入的bean的ID.  </p><p>@Qualifier也可以使用自定义的限定符而非bean的id, 方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"qualifier_id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">implements</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用自定义限定符"><a href="#使用自定义限定符" class="headerlink" title="使用自定义限定符"></a>使用自定义限定符</h3><p>当一个限定符仍然不可以解决歧义问题, 就需要使用自定义限定符号(Java8之前版本不支持同一个条目重复出现多个相同类型的注解). </p><p>注: Java8允许出现重复注解, 只要注解本身在定义的时候带有@Repeatable即可. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class="line">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cold&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR,ElementType.FIELD,</span><br><span class="line">        ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Warm&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Cold</span></span><br><span class="line"><span class="meta">@Warm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">implements</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>Spring定义了多个作用域:</p><ol><li>单例(Singleton): 在整个应用中, 只创建一个实例( 默认实现) </li><li>原型(Prototype): 每次注入或者通过Spring应用上下文获取的时候, 都会创建一个新的实例</li><li>会话(Session): 在Web应用中, 为每一个回话创建一个bean实例</li><li>请求(Request): 在Web应用中, 为每个请求创建一个bean实例</li></ol><p>如果要使用单例以外的作用域, 可以使用@Scope注解.</p><p>使用组件扫描来发现和声明bean, 则可以在bean的类上使用@Scope注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Componet</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@Scope(&quot;prototype&quot;)</code>也是可以的, 但是更易出错.</p><p>同样可以在Java配置中来声明原型bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassName <span class="title">getArg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用XML文件也可以来配置bean.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行时注入"><a href="#运行时注入" class="headerlink" title="运行时注入"></a>运行时注入</h2>]]></content>
    
    <summary type="html">
    
      Spring高级装配
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ivyxjc.xyz/categories/JavaWeb/"/>
    
    
      <category term="javaweb" scheme="https://ivyxjc.xyz/tags/javaweb/"/>
    
      <category term="spring" scheme="https://ivyxjc.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring装配bean</title>
    <link href="https://ivyxjc.xyz/2016/12/20/javaWeb/spring/2016-12-20-Spring-bean/"/>
    <id>https://ivyxjc.xyz/2016/12/20/javaWeb/spring/2016-12-20-Spring-bean/</id>
    <published>2016-12-19T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.350Z</updated>
    
    <content type="html"><![CDATA[<p>Spring有三种装配机制:</p><ol><li>在XML文件进行显示配置</li><li>在Java中进行显示配置</li><li>隐式的bean发现机制和自动装配</li></ol><a id="more"></a><h2 id="自动化装配bean"><a href="#自动化装配bean" class="headerlink" title="自动化装配bean"></a>自动化装配bean</h2><h3 id="使得bean可以被发现"><a href="#使得bean可以被发现" class="headerlink" title="使得bean可以被发现"></a>使得bean可以被发现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title=<span class="string">"title"</span>;</span><br><span class="line">    <span class="keyword">private</span> String artist=<span class="string">"artist"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Playing "</span>+title+<span class="string">" by "</span>+artist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类上使用@Component注解, 这个注解表明该类会作为组件类.</p><h3 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h3><h4 id="Java开启组件扫描"><a href="#Java开启组件扫描" class="headerlink" title="Java开启组件扫描"></a>Java开启组件扫描</h4><p>在类前添加@ComponentScan注解, 即可开启组件扫描, 默认扫描本类所在的包及其子包, 查找所有带@Component注解的类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描其它的包"><a href="#扫描其它的包" class="headerlink" title="扫描其它的包"></a>扫描其它的包</h3><p>可以给ComponentScan添加相关的属性来自定义需要扫描的包:</p><ol><li>ComponentScan(“packageName”)</li><li>ComponentScan(basePackage={“package1”,”package2”})</li><li>ComponentScan(basePackageClasses={Class1.class,CLass2.class})</li></ol><p>方案1将扫描指定包名, 方案2将扫描指定的多个包及其子包, 方案3将扫描这个几个类所在的包及其子包. 在第三种方法中, 我们可以在包中添加一个空的接口, 然后使用该接口来作为扫描的标记.</p><h4 id="XML文件开启组件扫描"><a href="#XML文件开启组件扫描" class="headerlink" title="XML文件开启组件扫描"></a>XML文件开启组件扫描</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"packageName"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加注解自动装配"><a href="#添加注解自动装配" class="headerlink" title="添加注解自动装配"></a>添加注解自动装配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompactDisc</span><span class="params">(CompactDisc cd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cd = cd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有匹配的bean, 在创建应用上下文时, Spring会抛出一个异常. 可以使用<code>@Autowired(required=false)</code>来避免此异常. 此时, Spring会尝试自动装箱, 但是如果没有匹配的bean时, Spring会让该bean处于未装配的状态. 如果此时调用未装配状态的属性时 可以能会抛出NullPointerException.</p><h2 id="Java装配bean"><a href="#Java装配bean" class="headerlink" title="Java装配bean"></a>Java装配bean</h2><p>利用JavaConfig来装配bean是比较好的方案. 相对于使用XML文件来装配bean, 它更为强大, 类型安全且更便于重构.</p><h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><p>创建配置类, 为类添加@Configuration的注解.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明bean"><a href="#声明bean" class="headerlink" title="声明bean"></a>声明bean</h3><p>利用JavaConfig来声明bean, 需要编写一个创建所需类型的实例的方法, 并在该方法上添加@Bean注解.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassName <span class="title">bean1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClassName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Bean的注解会告诉Spring该方法会返回一个ClassName实例, 该对象将被注册为bean, 方法体中包含了最终产生的bean的具体方法.</p><p>该bean的ID默认即为方法名, 当然可以使用<code>@Bean(name=&quot;id&quot;)</code>自定义bean的id.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class1 <span class="title">classBean1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassName <span class="title">bean1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClassName(classBean1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassName <span class="title">bean2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClassName(classBean1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下, Spring的bean都是单例, 所以当有多个注入方法中都使用到了classBean1方法的时候, 事实上传入bean1和bean2方法中的Class1实例为同一个.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassName <span class="title">bean1</span><span class="params">(Class1 class1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ....;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里, <code>bean1</code>方法请求了一个Class1参数. 当Spring调用bean1方法来创建一个ClassName bean的时候, 会自动地装配一个Class1到该方法中. 这种方法是比较好的, 使用这种方法, 它不会要求Class1也在同一个配置类中声明. Spring可以自动扫描多个JavaConfig类, 甚至XML文件来实现这种装配.</p><h2 id="XML装配bean"><a href="#XML装配bean" class="headerlink" title="XML装配bean"></a>XML装配bean</h2><p>XML在Spring早期是描述配置的主要书写方式, 但是现在更因为依赖于自动化配置和依赖Java的配置. 一个很主要的原因即在于, 使用XML文件来配置时, 大量的class属性是以字符串形式来保存的, 并不能在编译期间接受类型检查. 不过可以利用IDE的自动感知功能来确保XML配置中类型的正确.</p><p>最基本的XML配置文件如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明一个简单的bean"><a href="#声明一个简单的bean" class="headerlink" title="声明一个简单的bean"></a>声明一个简单的bean</h3><p>可以按照如下方式声明bean:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ClassName"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以向这个bean添加id:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造器注入初始化bean"><a href="#构造器注入初始化bean" class="headerlink" title="构造器注入初始化bean"></a>构造器注入初始化bean</h3><p>两种方案来构建构造器注入:</p><ol><li><code>&lt;construct-arg&gt;</code>元素</li><li><code>c-</code>命名空间</li></ol><p>在大部分情况下, 这两种方式基本上是相同的, 但是对于部分情况, 只有<code>&lt;construct-arg&gt;</code>能够做到(例如注入集合).</p><h4 id="构造器注入bean引用"><a href="#构造器注入bean引用" class="headerlink" title="构造器注入bean引用"></a>构造器注入bean引用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;construct-arg ref="bean1"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个ClassName实例,其中将一个ID为bean1的bean引用传递到ClassName的构造器中.</p><p>使用c-命名空间:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;c:arg-ref="bean1"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;c:_0-ref="bean1"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;c:_-ref="bean1"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>其中c:表示c-命名空间前缀, arg是构造器中相应的参数名称, -ref表示注入的是bean引用. bean1为要注入的bean的ID.</li><li>也可以使用参数在参数列表中的位置来注入bean, _0, _1 …来表示对应的参数</li><li>如果只有一个参数, 可以只使用_</li></ol><h4 id="构造器注入字面量"><a href="#构造器注入字面量" class="headerlink" title="构造器注入字面量"></a>构造器注入字面量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassName</span><span class="params">(String title, String artist)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;construct-arg value="some strings"/&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">construct-arg</span> <span class="attr">value</span>=<span class="string">"some strings"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用c-命名空间:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;c:_title="some strings"/&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">c:_artist="some</span> <span class="attr">strings</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;c:_0="some strings"/&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">c:_1="some</span> <span class="attr">strings</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与装配bean引用的区别就在与删除了最后的-ref. 如果只有一个参数, 同样可以使用 _ . </p><h4 id="构造器注入集合"><a href="#构造器注入集合" class="headerlink" title="构造器注入集合"></a>构造器注入集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassName</span><span class="params">(String title, String artist, List&lt;String&gt; tracks)</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">class</span>=<span class="string">"ClassName"</span></span></span><br><span class="line">    &lt;construct-arg value="some strings"/&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">construct-arg</span> <span class="attr">value</span>=<span class="string">"some strings"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">construct-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>some strings<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>some strings<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>some strings<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">construct-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果bean引用的list的话, 将value改为ref即可. 如果需要使用集合, 将list改为set即可.</p><h3 id="属性注入初始化bean"><a href="#属性注入初始化bean" class="headerlink" title="属性注入初始化bean"></a>属性注入初始化bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomeArg</span><span class="params">(Class1 arg1)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"id"</span> <span class="attr">ClassName</span>=<span class="string">"ClassName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someArg"</span> <span class="attr">ref</span>=<span class="string">"bean1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;property&gt;</code>元素为属性的Setter方法提供的功能与<code>&lt;construct-arg&gt;</code>元素为构造器所提供的功能是一样的, 用法也类似, 同样可以使用p-命名空间来代替.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;id&quot; ClassName=&quot;ClassName&quot;&gt;</span><br><span class="line">    &lt;p:someArg-ref=&quot;bean1&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring装配bean
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ivyxjc.xyz/categories/JavaWeb/"/>
    
    
      <category term="javaweb" scheme="https://ivyxjc.xyz/tags/javaweb/"/>
    
      <category term="spring" scheme="https://ivyxjc.xyz/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>如何下拉, 上拉刷新数据</title>
    <link href="https://ivyxjc.xyz/2016/12/07/android/UI%E7%9B%B8%E5%85%B3/2016-12-7-Pull-Refresh/"/>
    <id>https://ivyxjc.xyz/2016/12/07/android/UI相关/2016-12-7-Pull-Refresh/</id>
    <published>2016-12-06T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SwipeRefreshLayout"><a href="#SwipeRefreshLayout" class="headerlink" title="SwipeRefreshLayout"></a>SwipeRefreshLayout</h2><p><code>SwipeRefreshLayout</code>是由google官方提出的下拉刷新空间, 在<code>android.support.v4</code>兼容库中.</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p><code>SwipeRefreshLayout</code>基本上可以包裹任何可以滚动的内容(ListView, RecyclerView…,WebView)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/news_rv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="刷新操作"><a href="#刷新操作" class="headerlink" title="刷新操作"></a>刷新操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mSwipeRefreshLayout=(SwipeRefreshLayout)findViewById(R.id.swipe_refresh);</span><br><span class="line">mSwipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                pageNum+=<span class="number">1</span>;</span><br><span class="line">                updateDatas(service,apiKey,pageNum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDatas</span><span class="params">(Api.NewsService service,String apiKey,<span class="keyword">int</span> pageNum)</span></span>&#123;</span><br><span class="line">        service.getList(apiKey,pageNum)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      ...</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                      ...</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(News news)</span> </span>&#123;</span><br><span class="line">                        datas=news.getDatas();</span><br><span class="line">                        notifyDatasetChanged(datas);</span><br><span class="line">                        mSwipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在获取完数据之后, 需要调用<code>mSwipeRefreshLayout.setRefreshing(false);</code>, 否则加载的小圆圈将一直在旋转.</p><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置下拉出现的小圆圈是否缩放出现，出现的位置，最大的下拉位置</span></span><br><span class="line"> mSwipeRefreshLayout.setProgressViewOffset(<span class="keyword">true</span>,R.attr.actionBarSize+<span class="number">20</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置下拉圆圈的大小，两个值 LARGE， DEFAULT</span></span><br><span class="line">mySwipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用下拉刷新</span></span><br><span class="line">mySwipeRefreshLayout.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定下拉圆圈的背景颜色</span></span><br><span class="line">mySwipeRefreshLayout.setProgressBackgroundColor(R.color.red);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置下拉圆圈的颜色, 将按照该颜色顺序展示</span></span><br><span class="line">mySwipeRefreshLayout.setColorSchemeResources(color1,color2);</span><br></pre></td></tr></table></figure><h2 id="Ultra-Pull-to-Refresh"><a href="#Ultra-Pull-to-Refresh" class="headerlink" title="Ultra Pull to Refresh"></a>Ultra Pull to Refresh</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">build.gradle(project)</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &apos;https://oss.sonatype.org/content/repositories/snapshots&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build.gradle(app)</span><br><span class="line">compile &apos;in.srain.cube:ultra-ptr:1.0.11&apos;</span><br></pre></td></tr></table></figure><h4 id="布局文件-1"><a href="#布局文件-1" class="headerlink" title="布局文件"></a>布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">in.srain.cube.views.ptr.PtrClassicFrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/refresh_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/news_rv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">in.srain.cube.views.ptr.PtrClassicFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="刷新操作-1"><a href="#刷新操作-1" class="headerlink" title="刷新操作"></a>刷新操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mRefreshLayout=(PtrFrameLayout)findViewById(R.id.refresh_layout);</span><br><span class="line">mRefreshLayout.setLoadingMinTime(<span class="number">1000</span>);</span><br><span class="line">mRefreshLayout.setPullToRefresh(<span class="keyword">true</span>);</span><br><span class="line">...</span><br><span class="line">mRefreshLayout.setPtrHandler(<span class="keyword">new</span> PtrHandler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCanDoRefresh</span><span class="params">(PtrFrameLayout frame, View content, View header)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// here check list view, not content.</span></span><br><span class="line">        <span class="keyword">return</span> PtrDefaultHandler.checkContentCanBePulledDown(frame,content, header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefreshBegin</span><span class="params">(PtrFrameLayout frame)</span> </span>&#123;</span><br><span class="line">        pageNum+=<span class="number">1</span>;</span><br><span class="line">        updateDatas(service,apiKey,pageNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDatas</span><span class="params">(Api.NewsService service,String apiKey,<span class="keyword">int</span> pageNum)</span></span>&#123;</span><br><span class="line">        service.getList(apiKey,pageNum)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;News&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(News news)</span> </span>&#123;</span><br><span class="line">                        datas=news.getShowapi_res_body().getPagebean().getContentlist();</span><br><span class="line">                        notifyDatasetChanged(datas);</span><br><span class="line">                        mRefreshLayout.refreshComplete();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何下拉,上拉刷新数据.本文介绍SwipeRefreshLayout,
    
    </summary>
    
      <category term="Android" scheme="https://ivyxjc.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="android_UI" scheme="https://ivyxjc.xyz/tags/android-UI/"/>
    
      <category term="android_refresh" scheme="https://ivyxjc.xyz/tags/android-refresh/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://ivyxjc.xyz/2016/12/06/algorithm/algorithm/2016-12-6-dynamic-programming/"/>
    <id>https://ivyxjc.xyz/2016/12/06/algorithm/algorithm/2016-12-6-dynamic-programming/</id>
    <published>2016-12-05T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.283Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划适用于原问题的子问题之间还存在公共子子问题, 分治法适用于子问题之间没有过多的相互关系.</p><a id="more"></a><h2 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h2><p>不同长度的钢条可以售出不同的价格, 现有一根长度为n的钢条, 现切割该钢条成不同长度的子钢条, 那么最佳的</p><h2 id="矩阵链问题"><a href="#矩阵链问题" class="headerlink" title="矩阵链问题"></a>矩阵链问题</h2><h2 id="最长公共子序列问题"><a href="#最长公共子序列问题" class="headerlink" title="最长公共子序列问题"></a>最长公共子序列问题</h2>]]></content>
    
    <summary type="html">
    
      Codeforces Education Round7几道题目的解答
    
    </summary>
    
      <category term="Algorithm" scheme="https://ivyxjc.xyz/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://ivyxjc.xyz/tags/algorithm/"/>
    
      <category term="dynamic_programming" scheme="https://ivyxjc.xyz/tags/dynamic-programming/"/>
    
  </entry>
  
  <entry>
    <title>Glide源码分析 一</title>
    <link href="https://ivyxjc.xyz/2016/11/30/android/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/2016-11-30-Glide-source_1/"/>
    <id>https://ivyxjc.xyz/2016/11/30/android/第三方库/2016-11-30-Glide-source_1/</id>
    <published>2016-11-29T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从Glide入口开始"><a href="#从Glide入口开始" class="headerlink" title="从Glide入口开始"></a>从Glide入口开始</h2><p>Glide最简单的用法如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context);</span><br><span class="line">    .load(url)</span><br><span class="line">    <span class="comment">//硬盘存储策略</span></span><br><span class="line">    .diskCacheStrategy(DiskCacheStrategy.ALL)</span><br><span class="line">    <span class="comment">//是否启用内存缓存 默认为true</span></span><br><span class="line">    .skipMemoryCache(<span class="keyword">false</span>)</span><br><span class="line">    .centerCrop()</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><h3 id="with-context"><a href="#with-context" class="headerlink" title="with(context)"></a>with(context)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    RequestManagerRetriever retriever = RequestManagerRetriever.get();</span><br><span class="line">    <span class="keyword">return</span> retriever.get(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestManagerRetriever-get-context"><a href="#RequestManagerRetriever-get-context" class="headerlink" title="RequestManagerRetriever get(context)"></a>RequestManagerRetriever get(context)</h3><p>依据传入的context的类型, 进行相应的操作. context的类型主要分为<code>FragmentActivity</code>, <code>Activity</code>和<code>ContextWrapper</code>, 当context是<code>ContextWrapper</code>时, 调用<code>get(Context context)</code>查看其封装的是哪一种Activity.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RequestManagerRetriever.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You cannot start a load on a null Context"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context <span class="keyword">instanceof</span> Application)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> FragmentActivity) &#123;</span><br><span class="line">            <span class="keyword">return</span> get((FragmentActivity) context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            <span class="keyword">return</span> get((Activity) context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context <span class="keyword">instanceof</span> ContextWrapper) &#123;</span><br><span class="line">            <span class="keyword">return</span> get(((ContextWrapper) context).getBaseContext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getApplicationManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestManagerRetriever-get-Activity-get-FragmentActivity"><a href="#RequestManagerRetriever-get-Activity-get-FragmentActivity" class="headerlink" title="RequestManagerRetriever get(Activity) get(FragmentActivity)"></a>RequestManagerRetriever get(Activity) get(FragmentActivity)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RequestManagerRetriever.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">        <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        assertNotDestroyed(activity);</span><br><span class="line">        FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class="line">        <span class="keyword">return</span> supportFragmentGet(activity, fm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="keyword">return</span> get(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//判断activity是否已经被销毁, 如果销毁抛出异常</span></span><br><span class="line">        assertNotDestroyed(activity);</span><br><span class="line">        <span class="comment">//获取对应FragmenManager</span></span><br><span class="line">        android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">return</span> fragmentGet(activity, fm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法差别不大, 主要是因为<code>FragmentActivity</code>来自于support v4库中, 和标准库Activity获取FragmentManager的方法以及返回的FragmentManager类型不太相同.</p><h3 id="RequestManagerRetriever-fragmentGet-Context-FramentManager"><a href="#RequestManagerRetriever-fragmentGet-Context-FramentManager" class="headerlink" title="RequestManagerRetriever fragmentGet(Context, FramentManager)"></a>RequestManagerRetriever fragmentGet(Context, FramentManager)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">RequestManagerRetriever.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN_MR1)</span><br><span class="line"><span class="function">RequestManagerFragment <span class="title">getRequestManagerFragment</span><span class="params">(<span class="keyword">final</span> android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class="line">    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">        current = pendingRequestManagerFragments.get(fm);</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            current = <span class="keyword">new</span> RequestManagerFragment();</span><br><span class="line">            pendingRequestManagerFragments.put(fm, current);</span><br><span class="line">            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</span><br><span class="line">            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class="line"><span class="function">RequestManager <span class="title">fragmentGet</span><span class="params">(Context context, android.app.FragmentManager fm)</span> </span>&#123;</span><br><span class="line">    RequestManagerFragment current = getRequestManagerFragment(fm);</span><br><span class="line">    RequestManager requestManager = current.getRequestManager();</span><br><span class="line">    <span class="keyword">if</span> (requestManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">        requestManager = <span class="keyword">new</span> RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</span><br><span class="line">        current.setRequestManager(requestManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两段代码的主要意义在于生成一个<code>RequestManagerFragment</code>并没有内容的但是绑定在制定的context上. 其实目的就是将该Fragment的生命周期绑定在该context上, 并在相应的方法调用时执行相应的操作.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">RequestManagerFragment.java</span><br><span class="line"></span><br><span class="line">ActivityFragmentLifecycle lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    lifecycle.onStart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    lifecycle.onStop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    lifecycle.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestManager"><a href="#RequestManager" class="headerlink" title="RequestManager"></a>RequestManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">RequestManager implements LifecycleListener</span><br><span class="line"><span class="comment">//ActivityFragmentLifecycle 也实现了 LifecycleListener</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// onStart might not be called because this object may be created after the fragment/activity's onStart method.</span></span><br><span class="line">    resumeRequests();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Lifecycle callback that unregisters for connectivity events (if the android.permission.ACCESS_NETWORK_STATE</span></span><br><span class="line"><span class="comment">    * permission is present) and pauses in progress loads.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pauseRequests();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Lifecycle callback that cancels all in progress requests and clears and recycles resources for all completed</span></span><br><span class="line"><span class="comment">    * requests.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    requestTracker.clearRequests();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActivityFragmentLifecycle</span> <span class="keyword">implements</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;LifecycleListener&gt; lifecycleListeners =</span><br><span class="line">            Collections.newSetFromMap(<span class="keyword">new</span> WeakHashMap&lt;LifecycleListener, Boolean&gt;());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isStarted;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isDestroyed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds the given listener to the list of listeners to be notified on each lifecycle event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     The latest lifecycle event will be called on the given listener synchronously in this method. If the</span></span><br><span class="line"><span class="comment">     *     activity or fragment is stopped, &#123;<span class="doctag">@link</span> LifecycleListener#onStop()&#125;&#125; will be called, and same for onStart and</span></span><br><span class="line"><span class="comment">     *     onDestroy.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     Note - &#123;<span class="doctag">@link</span> com.bumptech.glide.manager.LifecycleListener&#125;s that are added more than once will have their</span></span><br><span class="line"><span class="comment">     *     lifecycle methods called more than once. It is the caller's responsibility to avoid adding listeners</span></span><br><span class="line"><span class="comment">     *     multiple times.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(LifecycleListener listener)</span> </span>&#123;</span><br><span class="line">        lifecycleListeners.add(listener);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDestroyed) &#123;</span><br><span class="line">            listener.onDestroy();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isStarted) &#123;</span><br><span class="line">            listener.onStart();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            listener.onStop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isStarted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">            lifecycleListener.onStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">            lifecycleListener.onStop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isDestroyed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</span><br><span class="line">            lifecycleListener.onDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码总体的目的就是将RequestManager的生命周期和RequestManagerFragment绑定起来, 进而和Activity的生命周期绑定起来.</p><h2 id="RequestManager-1"><a href="#RequestManager-1" class="headerlink" title="RequestManager"></a>RequestManager</h2><p>下面来看一下RequestManager的功能.</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">RequestManager.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestManager</span><span class="params">(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, lifecycle, treeNode, <span class="keyword">new</span> RequestTracker(), <span class="keyword">new</span> ConnectivityMonitorFactory());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestManager(Context context, <span class="keyword">final</span> Lifecycle lifecycle, RequestManagerTreeNode treeNode,</span><br><span class="line">        RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context.getApplicationContext();</span><br><span class="line">    <span class="keyword">this</span>.lifecycle = lifecycle;</span><br><span class="line">    <span class="keyword">this</span>.treeNode = treeNode;</span><br><span class="line">    <span class="keyword">this</span>.requestTracker = requestTracker;</span><br><span class="line">    <span class="keyword">this</span>.glide = Glide.get(context);</span><br><span class="line">    <span class="keyword">this</span>.optionsApplier = <span class="keyword">new</span> OptionsApplier();</span><br><span class="line"></span><br><span class="line">    ConnectivityMonitor connectivityMonitor = factory.build(context,</span><br><span class="line">            <span class="keyword">new</span> RequestManagerConnectivityListener(requestTracker));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we're the application level request manager, we may be created on a background thread. In that case we</span></span><br><span class="line">    <span class="comment">// cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding</span></span><br><span class="line">    <span class="comment">// ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.</span></span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lifecycle.addListener(RequestManager.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lifecycle.addListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lifecycle.addListener(connectivityMonitor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Glide-get-context"><a href="#Glide-get-context" class="headerlink" title="Glide.get(context)"></a>Glide.get(context)</h4><p>该方法就是利用单例模式获取一个Glide实例.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Glide.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Glide glide;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Glide <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Glide.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Context applicationContext = context.getApplicationContext();</span><br><span class="line">                List&lt;GlideModule&gt; modules = <span class="keyword">new</span> ManifestParser(applicationContext).parse();</span><br><span class="line"></span><br><span class="line">                GlideBuilder builder = <span class="keyword">new</span> GlideBuilder(applicationContext);</span><br><span class="line">                <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</span><br><span class="line">                    <span class="keyword">module</span>.applyOptions(applicationContext, builder);</span><br><span class="line">                &#125;</span><br><span class="line">                glide = builder.createGlide();</span><br><span class="line">                <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</span><br><span class="line">                    <span class="keyword">module</span>.registerComponents(applicationContext, glide);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> glide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GlideBuilder"><a href="#GlideBuilder" class="headerlink" title="GlideBuilder"></a>GlideBuilder</h4><p>利用GlideBuilder中的createGlide()方法生成了Glide, 在这个过程中完成了以下几个任务:</p><ol><li>初始化线程池</li><li>初始化bitmap池</li><li>初始化内存缓存类</li><li>初始化内部磁盘缓存类</li><li>初始化引擎类</li><li>设置默认的解码格式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">GlideBuilder.java</span><br><span class="line"></span><br><span class="line"><span class="function">Glide <span class="title">createGlide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sourceService == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//初始化线程池</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cores = Math.max(<span class="number">1</span>, Runtime.getRuntime().availableProcessors());</span><br><span class="line">        sourceService = <span class="keyword">new</span> FifoPriorityThreadPoolExecutor(cores);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (diskCacheService == <span class="keyword">null</span>) &#123;</span><br><span class="line">        diskCacheService = <span class="keyword">new</span> FifoPriorityThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化bitmap池</span></span><br><span class="line">    MemorySizeCalculator calculator = <span class="keyword">new</span> MemorySizeCalculator(context);</span><br><span class="line">    <span class="keyword">if</span> (bitmapPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = calculator.getBitmapPoolSize();</span><br><span class="line">            bitmapPool = <span class="keyword">new</span> LruBitmapPool(size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bitmapPool = <span class="keyword">new</span> BitmapPoolAdapter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memoryCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        memoryCache = <span class="keyword">new</span> LruResourceCache(calculator.getMemoryCacheSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diskCacheFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        diskCacheFactory = <span class="keyword">new</span> InternalCacheDiskCacheFactory(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (engine == <span class="keyword">null</span>) &#123;</span><br><span class="line">        engine = <span class="keyword">new</span> Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (decodeFormat == <span class="keyword">null</span>) &#123;</span><br><span class="line">        decodeFormat = DecodeFormat.DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Glide(engine, memoryCache, bitmapPool, context, decodeFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ManifestParser"><a href="#ManifestParser" class="headerlink" title="ManifestParser"></a>ManifestParser</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">ManifestParser.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GLIDE_MODULE_VALUE = <span class="string">"GlideModule"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;GlideModule&gt; <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;GlideModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;GlideModule&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据PackageName获取metadata信息</span></span><br><span class="line">        ApplicationInfo appInfo = context.getPackageManager().getApplicationInfo(</span><br><span class="line">                context.getPackageName(), PackageManager.GET_META_DATA);</span><br><span class="line">        <span class="comment">//若有metadata信息</span></span><br><span class="line">        <span class="keyword">if</span> (appInfo.metaData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历metadata</span></span><br><span class="line">            <span class="keyword">for</span> (String key : appInfo.metaData.keySet()) &#123;</span><br><span class="line">                <span class="comment">//将key和GLIDE_MODULE_VALUE相等的全部加入modules 之中</span></span><br><span class="line">                <span class="keyword">if</span> (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) &#123;</span><br><span class="line">                    modules.add(parseModule(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to find metadata to parse GlideModules"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modules;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取GlideModule实例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GlideModule <span class="title">parseModule</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to find GlideModule implementation"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object <span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">module</span> = clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to instantiate GlideModule implementation for "</span> + clazz, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to instantiate GlideModule implementation for "</span> + clazz, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">module</span> <span class="keyword">instanceof</span> GlideModule)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Expected instanceof GlideModule, but found: "</span> + <span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (GlideModule) <span class="keyword">module</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射的方式获取在Manifest.xml中自定义的GlideModule对象, 获得之后遍历ArrayList<glidemodule>, 对每一个GlideModuled调用相应的applyOptions()和registerComponents()方法.</glidemodule></p>]]></content>
    
    <summary type="html">
    
      Glide源码分析
    
    </summary>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="project" scheme="https://ivyxjc.xyz/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Glide源码分析 二</title>
    <link href="https://ivyxjc.xyz/2016/11/30/android/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/2016-12-5-Glide-source_2/"/>
    <id>https://ivyxjc.xyz/2016/11/30/android/第三方库/2016-12-5-Glide-source_2/</id>
    <published>2016-11-29T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.338Z</updated>
    
    <summary type="html">
    
      Glide源码分析
    
    </summary>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="project" scheme="https://ivyxjc.xyz/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>知乎专栏android app开发中的一些问题及解决方法</title>
    <link href="https://ivyxjc.xyz/2016/11/27/android/2016-11-27-zhihu-android/"/>
    <id>https://ivyxjc.xyz/2016/11/27/android/2016-11-27-zhihu-android/</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.292Z</updated>
    
    <content type="html"><![CDATA[<p>经过一段时间的开发, 知乎专栏app主体上完成, 但还有很多功能没有做出来, 下面是开发过程中的一些问题以及将要完善的功能.</p><h2 id="如何根据点击自定义创建Fragment"><a href="#如何根据点击自定义创建Fragment" class="headerlink" title="如何根据点击自定义创建Fragment"></a>如何根据点击自定义创建Fragment</h2><p>当我们使用tablayout时, 根据点击选择创建fragment, 这时可以使用下面的方法根据传入的内容自定义生成fragment.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceFragment</span><span class="params">(Fragment fragment)</span></span>&#123;</span><br><span class="line">       fm.beginTransaction()</span><br><span class="line">               .replace(R.id.fragment_container,fragment)</span><br><span class="line">               .commit();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">replaceFragment(FragmentTab.newSingleton(R.array.develop,R.array.develop_suffix));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FragmentTab <span class="title">newSingleton</span><span class="params">(<span class="keyword">int</span> titleId, <span class="keyword">int</span> suffixId)</span></span>&#123;</span><br><span class="line">       FragmentTab fragment=<span class="keyword">new</span> FragmentTab();</span><br><span class="line">       Bundle bundle=<span class="keyword">new</span> Bundle();</span><br><span class="line">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_TITLE,titleId);</span><br><span class="line">       bundle.putInt(Constant.LIST_ACTIVITY_NAV_SUFFIX,suffixId);</span><br><span class="line">       fragment.setArguments(bundle);</span><br><span class="line">       <span class="keyword">return</span> fragment;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="如何设置夜间模式"><a href="#如何设置夜间模式" class="headerlink" title="如何设置夜间模式"></a>如何设置夜间模式</h2><h2 id="如何进行数据缓存"><a href="#如何进行数据缓存" class="headerlink" title="如何进行数据缓存"></a>如何进行数据缓存</h2><p>关于图片的缓存, Glide库已经完成</p><p>其它内容的缓存使用的是序列化来完成的. 加了缓存后, 就要注意从网络中获得数据之后如何处理这些缓存的数据. 我目前选择的方法是, 一旦从网络中获取到新的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Context context, String filename,Object list)</span></span>&#123;</span><br><span class="line">    FileOutputStream out=<span class="keyword">null</span>;</span><br><span class="line">    ObjectOutputStream writer=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        out=context.openFileOutput(filename, Context.MODE_PRIVATE);</span><br><span class="line">        writer=<span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        writer.writeObject(list);</span><br><span class="line">        Log.i(TAG.CACHE_UTIL,<span class="string">"cache list"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        Log.i(TAG.CACHE_UTIL,e.toString());</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(writer!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">load</span><span class="params">(Context context,String filename)</span></span>&#123;</span><br><span class="line">    FileInputStream in=<span class="keyword">null</span>;</span><br><span class="line">    ObjectInputStream reader=<span class="keyword">null</span>;</span><br><span class="line">    Object res=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        in=context.openFileInput(filename);</span><br><span class="line">        reader=<span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        res=reader.readObject();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      知乎专栏android app开发中的一些问题及解决方法
    
    </summary>
    
      <category term="Android" scheme="https://ivyxjc.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="project" scheme="https://ivyxjc.xyz/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>利用Retrofit, RxJava获取网络内容</title>
    <link href="https://ivyxjc.xyz/2016/11/25/android/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/2016-11-25-retrofit-rxjava/"/>
    <id>https://ivyxjc.xyz/2016/11/25/android/第三方库/2016-11-25-retrofit-rxjava/</id>
    <published>2016-11-24T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Retrofit-amp-RxJava"><a href="#Retrofit-amp-RxJava" class="headerlink" title="Retrofit &amp; RxJava"></a>Retrofit &amp; RxJava</h2><p>关于如何使用Retrofit和RxJava请阅读参考中的两篇文章.</p><h2 id="Retrofit处理数据"><a href="#Retrofit处理数据" class="headerlink" title="Retrofit处理数据"></a>Retrofit处理数据</h2><p>Retrofit是在什么时候处理从网络中获取到的json数据的呢? 我从几个使用了Retrofit的项目源代码寻找了半天, 也没有找到处理json的相关代码. 后来才发现, Retrofit中使用<code>.addConverterFactory(GsonConverterFactory.create())</code>其实就是自动添加了json解析, 它会将json数据直接转换为java类(即Pojo).</p><p><a href="http://pojo.sodhanalibrary.com/" target="_blank" rel="noopener">convertToPojo</a>可以根据json的内容自动生成Pojo类.</p><h3 id="以豆瓣api为例"><a href="#以豆瓣api为例" class="headerlink" title="以豆瓣api为例"></a>以豆瓣api为例</h3><h4 id="json数据格式"><a href="#json数据格式" class="headerlink" title="json数据格式"></a>json数据格式</h4><p>豆瓣正在热映的json数据格式大致如下:</p><p><img src="http://oezmbgg4j.bkt.clouddn.com/douban_json.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DoubanService.java</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DoubanService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"/v2/movie/in_theaters"</span>)</span><br><span class="line">    <span class="function">Call&lt;Douban&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pojo类"><a href="#pojo类" class="headerlink" title="pojo类"></a>pojo类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Douban</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SerializedName</span>(value = <span class="string">"subjects"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Subjects&gt; subjects;</span><br><span class="line"></span><br><span class="line">    ...Getter and Setter..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subjects</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Rating rating;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rating</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String min;</span><br><span class="line">    <span class="keyword">private</span> String max;</span><br><span class="line">    <span class="keyword">private</span> String stars;</span><br><span class="line"></span><br><span class="line">    ...Getter and Setter..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理并显示数据"><a href="#处理并显示数据" class="headerlink" title="处理并显示数据"></a>处理并显示数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubanRun</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        Retrofit retrofit=<span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"https://api.douban.com"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        DoubanService douban=retrofit.create(DoubanService.class);</span><br><span class="line">        Call&lt;Douban&gt; call=douban.getList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Douban d=call.execute().body();</span><br><span class="line">            <span class="keyword">for</span> (Subjects l:d.getSubjects())&#123;</span><br><span class="line">                 Log.i(<span class="string">"TAGGGG"</span>,l.getId()+<span class="string">" "</span>+l.getTitle());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.i(<span class="string">"TAGGGG"</span>,<span class="string">"ff"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">26630781 我不是潘金莲</span><br><span class="line">25726614 神奇动物在哪里</span><br><span class="line">25793398 海洋奇缘</span><br><span class="line">26365631 冲天火</span><br><span class="line">26596486 名侦探柯南：纯黑的恶梦</span><br><span class="line">3025375 奇异博士</span><br><span class="line">26370431 夏威夷之恋</span><br><span class="line">26673217 我是处女座</span><br><span class="line">26696875 最萌身高差</span><br><span class="line">25983044 比利·林恩的中场战事</span><br><span class="line">22266320 深海浩劫</span><br><span class="line">26876505 怨灵地下室</span><br><span class="line">25921812 驴得水</span><br><span class="line">26598021 航海王之黄</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="配合RxJava"><a href="#配合RxJava" class="headerlink" title="配合RxJava"></a>配合RxJava</h4><p><code>DoubanService.java</code>改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DoubanService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"/v2/movie/in_theaters"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Douban&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DoubanRun</code>改为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubanRun</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line"></span><br><span class="line">        Retrofit retrofit=<span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"https://api.douban.com"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line"></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        DoubanService doubanService=retrofit.create(DoubanService.class);</span><br><span class="line"></span><br><span class="line">        doubanService.getList()</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Douban&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Douban douban)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (Subjects l:douban.getSubjects())&#123;</span><br><span class="line">                            Log.i(<span class="string">"TAGGGG"</span>,l.getId()+<span class="string">" "</span>+l.getTitle());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>出现<code>Expected BEGIN_ARRAY but was BEGIN_OBJECT at</code>或者pojo类中对应的变量的类型不对. 比如 如果在<code>Subjects</code>类中将rating设为String. 就会有<code>Expected String but was BEGIN_OBJECT at...</code>错误.</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a><br><a href="https://web.archive.org/web/20161023043938/http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">archive.org备份页面</a></li><li><a href="https://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">RxJava 与 Retrofit 结合的最佳实践</a><br><a href="https://web.archive.org/web/20161022232218/http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">archive.org备份页面</a></li></ol>]]></content>
    
    <summary type="html">
    
      Retrofit
    
    </summary>
    
      <category term="Android" scheme="https://ivyxjc.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="android_lib" scheme="https://ivyxjc.xyz/tags/android-lib/"/>
    
  </entry>
  
  <entry>
    <title>Translucent Bar</title>
    <link href="https://ivyxjc.xyz/2016/11/21/android/UI%E7%9B%B8%E5%85%B3/Bar/2016-11-26-Translucent-Bar/"/>
    <id>https://ivyxjc.xyz/2016/11/21/android/UI相关/Bar/2016-11-26-Translucent-Bar/</id>
    <published>2016-11-20T16:00:00.000Z</published>
    <updated>2018-08-09T10:10:11.301Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="http://blog.csdn.net/sbsujjbcy/article/details/" target="_blank" rel="noopener">Android 实现变色状态栏 </a><br><a href="http://web.archive.org/web/20160421191353/http://blog.csdn.net/sbsujjbcy/article/details/48370371" target="_blank" rel="noopener">archive.org备份页面</a></li></ol>]]></content>
    
    <summary type="html">
    
      如何实现变色状态栏
    
    </summary>
    
      <category term="Android" scheme="https://ivyxjc.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="https://ivyxjc.xyz/tags/android/"/>
    
      <category term="android_UI" scheme="https://ivyxjc.xyz/tags/android-UI/"/>
    
  </entry>
  
</feed>
